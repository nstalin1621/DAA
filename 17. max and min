#include <stdio.h>

// Structure to store both the maximum and minimum values
struct MaxMin {
    int max;
    int min;
};

// Function to find the maximum and minimum values using divide and conquer
struct MaxMin findMaxMin(int arr[], int left, int right) {
    struct MaxMin result, leftResult, rightResult;
    int mid;

    // If the list has only one element, return it as both max and min
    if (left == right) {
        result.max = arr[left];
        result.min = arr[left];
        return result;
    }

    // If the list has two elements, compare and return
    if (left == right - 1) {
        if (arr[left] < arr[right]) {
            result.max = arr[right];
            result.min = arr[left];
        } else {
            result.max = arr[left];
            result.min = arr[right];
        }
        return result;
    }

    // If the list has more than two elements, divide it into two halves
    mid = (left + right) / 2;
    leftResult = findMaxMin(arr, left, mid);
    rightResult = findMaxMin(arr, mid + 1, right);

    // Compare the maximum and minimum values from both halves
    if (leftResult.max > rightResult.max) {
        result.max = leftResult.max;
    } else {
        result.max = rightResult.max;
    }

    if (leftResult.min < rightResult.min) {
        result.min = leftResult.min;
    } else {
        result.min = rightResult.min;
    }

    return result;
}

int main() {
    int n;

    printf("Enter the number of elements in the list: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    struct MaxMin result = findMaxMin(arr, 0, n - 1);

    printf("Maximum value: %d\n", result.max);
    printf("Minimum value: %d\n", result.min);

    return 0;
}
